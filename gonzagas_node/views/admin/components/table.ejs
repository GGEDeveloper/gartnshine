<% 
  // Valores padrão
  const defaultOptions = {
    headers: [],
    rows: [],
    emptyMessage: 'Nenhum registro encontrado.',
    striped: true,
    hover: true,
    bordered: false,
    small: false,
    responsive: true,
    loading: false,
    loadingText: 'Carregando...',
    className: '',
    headerClass: '',
    bodyClass: '',
    rowClass: '',
    cellClass: '',
    theadClass: '',
    tbodyClass: '',
    // Paginação
    pagination: null, // { currentPage, totalPages, perPage, total, onPageChange }
    // Ordenação
    sortable: false,
    sortBy: null,
    sortDirection: 'asc',
    onSort: null
  };
  
  // Mesclar opções fornecidas com os valores padrão
  const options = { ...defaultOptions, ...(typeof locals === 'object' ? locals : {}) };
  
  // Classes da tabela
  const tableClasses = [
    'min-w-full',
    options.small ? 'text-sm' : 'text-sm',
    options.className
  ].filter(Boolean).join(' ');
  
  const theadClasses = [
    options.theadClass,
    options.bordered ? 'border-b-2 border-gray-200 dark:border-gray-700' : ''
  ].filter(Boolean).join(' ');
  
  const tbodyClasses = [
    'divide-y divide-gray-200 dark:divide-gray-700',
    options.tbodyClass
  ].filter(Boolean).join(' ');
  
  const thClasses = [
    'px-4 py-3',
    options.small ? 'py-2' : 'py-3',
    'text-left text-xs font-medium text-gray-500 dark:text-gray-400 uppercase tracking-wider',
    options.headerClass
  ].filter(Boolean).join(' ');
  
  const trClasses = (index) => [
    options.striped && index % 2 === 0 ? 'bg-gray-50 dark:bg-gray-800/50' : 'bg-white dark:bg-gray-800',
    options.hover ? 'hover:bg-gray-100 dark:hover:bg-gray-700' : '',
    options.rowClass
  ].filter(Boolean).join(' ');
  
  const tdClasses = [
    'px-4 py-3',
    options.small ? 'py-2' : 'py-3',
    'whitespace-nowrap text-sm text-gray-800 dark:text-gray-200',
    options.cellClass
  ].filter(Boolean).join(' ');
  
  // Função para renderizar o conteúdo da célula
  const renderCell = (content) => {
    if (content === null || content === undefined) return '-';
    if (typeof content === 'function') return content();
    return content;
  };
  
  // Função para lidar com a ordenação
  const handleSort = (key) => {
    if (!options.sortable || !options.onSort) return;
    
    let direction = 'asc';
    if (options.sortBy === key) {
      direction = options.sortDirection === 'asc' ? 'desc' : 'asc';
    }
    
    options.onSort(key, direction);
  };
  
  // Função para renderizar o ícone de ordenação
  const renderSortIcon = (key) => {
    if (!options.sortable || !options.onSort) return '';
    
    if (options.sortBy === key) {
      return options.sortDirection === 'asc' 
        ? '<i class="fas fa-sort-up ml-1"></i>' 
        : '<i class="fas fa-sort-down ml-1"></i>';
    }
    
    return '<i class="fas fa-sort ml-1 text-gray-300 dark:text-gray-600"></i>';
  };
%>

<div class="<%= options.responsive ? 'overflow-x-auto' : 'overflow-hidden' %>">
  <table class="<%= tableClasses %>">
    <!-- Cabeçalho da tabela -->
    <thead class="<%= theadClasses %>">
      <tr>
        <% options.headers.forEach((header, index) => { 
          const isSortable = options.sortable && header.sortKey !== false;
          const sortKey = header.sortKey || header.key || header.field || index;
          const thClass = [
            thClasses,
            header.className || '',
            header.align ? `text-${header.align}` : 'text-left'
          ].filter(Boolean).join(' ');
          
          const thAttrs = [
            `class="${thClass}"`,
            isSortable ? 'role="button"' : ''
          ].filter(Boolean).join(' ');
        %>
          <th <%= thAttrs %> 
              <% if (isSortable) { %>
                @click="<%= `window.dispatchEvent(new CustomEvent('sort-table', { detail: { key: '${sortKey}' } }))` %>"
              <% } %>
          >
            <div class="flex items-center <%= header.align === 'right' ? 'justify-end' : header.align === 'center' ? 'justify-center' : 'justify-start' %>">
              <span><%= header.label || header.title || header %></span>
              <% if (isSortable) { %>
                <span class="ml-1"><%- renderSortIcon(sortKey) %></span>
              <% } %>
            </div>
          </th>
        <% }) %>
      </tr>
    </thead>
    
    <!-- Corpo da tabela -->
    <tbody class="<%= tbodyClasses %>">
      <% if (options.loading) { %>
        <tr>
          <td colspan="<%= options.headers.length %>" class="<%= tdClasses %> text-center py-8">
            <div class="flex flex-col items-center justify-center">
              <div class="animate-spin rounded-full h-8 w-8 border-b-2 border-primary-600 mb-2"></div>
              <span class="text-sm text-gray-500 dark:text-gray-400"><%= options.loadingText %></span>
            </div>
          </td>
        </tr>
      <% } else if (options.rows.length === 0) { %>
        <tr>
          <td colspan="<%= options.headers.length %>" class="<%= tdClasses %> text-center py-8 text-gray-500 dark:text-gray-400">
            <i class="far fa-inbox text-3xl mb-2 block"></i>
            <p><%= options.emptyMessage %></p>
          </td>
        </tr>
      <% } else { %>
        <% options.rows.forEach((row, rowIndex) => { %>
          <tr class="<%= trClasses(rowIndex) %>">
            <% options.headers.forEach((header, colIndex) => { 
              const cellValue = header.key ? row[header.key] : 
                               header.field ? row[header.field] : 
                               typeof header.render === 'function' ? header.render(row, rowIndex) : 
                               row[colIndex];
              
              const tdClass = [
                tdClasses,
                header.cellClass || '',
                header.align ? `text-${header.align}` : ''
              ].filter(Boolean).join(' ');
              
              const cellContent = header.render && typeof header.render === 'function' 
                ? header.render(row, rowIndex) 
                : cellValue;
            %>
              <td class="<%= tdClass %>">
                <%= renderCell(cellContent) %>
              </td>
            <% }) %>
          </tr>
        <% }) %>
      <% } %>
    </tbody>
  </table>
  
  <!-- Paginação -->
  <% if (options.pagination && !options.loading) { %>
    <%- include('../partials/pagination', { pagination: options.pagination }) %>
  <% } %>
</div>

<!-- 
  Exemplos de uso:
  
  1. Tabela simples:
  <%- include('components/table', {
    headers: ['Nome', 'E-mail', 'Cargo'],
    rows: [
      ['João Silva', 'joao@exemplo.com', 'Desenvolvedor'],
      ['Maria Santos', 'maria@exemplo.com', 'Designer']
    ]
  }) %>
  
  2. Tabela com objetos e ordenação:
  <%- include('components/table', {
    headers: [
      { label: 'Nome', key: 'name', sortable: true },
      { label: 'E-mail', key: 'email', sortable: true },
      { label: 'Cargo', key: 'role' },
      { 
        label: 'Ações', 
        align: 'right',
        render: (row) => `
          <div class="flex justify-end space-x-2">
            <button class="text-blue-600 hover:text-blue-800 dark:text-blue-400 dark:hover:text-blue-300">
              <i class="fas fa-edit"></i>
            </button>
            <button class="text-red-600 hover:text-red-800 dark:text-red-400 dark:hover:text-red-300">
              <i class="fas fa-trash"></i>
            </button>
          </div>
        `
      }
    ],
    rows: [
      { id: 1, name: 'João Silva', email: 'joao@exemplo.com', role: 'Desenvolvedor' },
      { id: 2, name: 'Maria Santos', email: 'maria@exemplo.com', role: 'Designer' }
    ],
    sortable: true,
    sortBy: 'name',
    sortDirection: 'asc',
    onSort: (key, direction) => {
      console.log(`Ordenar por ${key} na direção ${direction}`);
      // Implementar lógica de ordenação
    },
    pagination: {
      currentPage: 1,
      totalPages: 5,
      perPage: 10,
      total: 50,
      onPageChange: (page) => {
        console.log(`Ir para a página ${page}`);
        // Implementar lógica de paginação
      }
    }
  }) %>
  
  3. Tabela com carregamento:
  <%- include('components/table', {
    headers: ['Nome', 'E-mail', 'Cargo'],
    rows: [],
    loading: true,
    loadingText: 'Carregando usuários...'
  }) %>
  
  4. Tabela vazia:
  <%- include('components/table', {
    headers: ['Nome', 'E-mail', 'Cargo'],
    rows: [],
    emptyMessage: 'Nenhum usuário cadastrado.'
  }) %>
-->
