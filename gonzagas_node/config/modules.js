/**
 * Configura√ß√£o dos M√≥dulos
 * 
 * Este arquivo gerencia o carregamento e configura√ß√£o de todos os m√≥dulos do sistema.
 */

const path = require('path');
const fs = require('fs');

// Lista de m√≥dulos ativos
const activeModules = [
  'core',
  'clients',
  'suppliers',
  'products',
  'inventory',
  'sales',
  'financial'
];

// Objeto para armazenar os m√≥dulos carregados
const modules = {};

// Carrega todos os m√≥dulos ativos
activeModules.forEach(moduleName => {
  const modulePath = path.join(__dirname, '../modules', moduleName);
  
  // Verifica se o m√≥dulo existe
  if (fs.existsSync(modulePath)) {
    try {
      // Carrega o m√≥dulo
      modules[moduleName] = require(modulePath);
      console.log(`‚úÖ M√≥dulo carregado: ${moduleName}`);
    } catch (error) {
      console.error(`‚ùå Erro ao carregar o m√≥dulo ${moduleName}:`, error.message);
    }
  } else {
    console.warn(`‚ö†Ô∏è  M√≥dulo n√£o encontrado: ${moduleName}`);
  }
});

/**
 * Obt√©m as rotas de todos os m√≥dulos
 * @returns {Object} Objeto com as rotas de todos os m√≥dulos
 */
function getModuleRoutes() {
  const routes = {};
  
  Object.entries(modules).forEach(([moduleName, module]) => {
    if (module.routes) {
      routes[moduleName] = module.routes;
    }
  });
  
  return routes;
}

/**
 * Inicializa os servi√ßos dos m√≥dulos
 * @param {Object} app - Inst√¢ncia do Express
 */
async function initializeModules(app) {
  try {
    // Inicializa cada m√≥dulo
    for (const [moduleName, module] of Object.entries(modules)) {
      if (typeof module.initialize === 'function') {
        console.log(`üîß Inicializando m√≥dulo: ${moduleName}`);
        await module.initialize(app);
      }
    }
    
    console.log('‚úÖ Todos os m√≥dulos foram inicializados com sucesso!');
  } catch (error) {
    console.error('‚ùå Erro ao inicializar os m√≥dulos:', error);
    throw error;
  }
}

module.exports = {
  modules,
  getModuleRoutes,
  initializeModules
};
